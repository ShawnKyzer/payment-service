import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    //This is for creating the shadow jar for dropwizard
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

project.ext {
    dropwizardVersion = '2.0.10'
    dropwizardKafkaVersion = '1.6.0'
    lombokVersion='1.18.6'
    protocVersion='3.4.0'
    grpcVersion='1.6.1'
}

version '1.0-SNAPSHOT'
group 'com.technicaltest.payment'
description 'Technical Test Inc. Payment Service'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'
    compile group: 'io.dropwizard', name: 'dropwizard-core', version: "${dropwizardVersion}"
    compile group: 'io.dropwizard.modules', name: 'dropwizard-health', version: '1.5.0'
    compile group: 'io.dropwizard', name: 'dropwizard-jdbi3', version: "${dropwizardVersion}"
    compile "io.dropwizard.modules:dropwizard-kafka:${dropwizardKafkaVersion}"
    compile 'com.google.protobuf:protobuf-javalite:3.8.0'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.12.2'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.4.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','build/generated/source/proto/main/java']    // Include generated gRPC protobuf classes
        }
        proto {
            srcDirs 'proto/'                                    // Protobuf definitions for services exposed
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

run {
    args = ['server', 'config.yml']
}

application {
    // Define the main class for the application.
    mainClassName = 'com.technicaltest.payment.service.PurchaseOrderConsumerApplication'
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.version
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC"))
                .format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
    archiveName 'technical-test-payment-service.jar'
}

